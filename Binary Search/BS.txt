Q1)Ceiling of a number

arr=[2,3,5,9,14,16,18]
target=15, ceiling->smallest elemt in array greater or= target=16

Soln: apply BS instead of returning -1 ,return start

Q2)Floor of a number

floor=greatest number smaller or = target
for eg: floor of 15=14

Soln: return end instead of -1

Q3)Find smallest letter greater than target

1. Same approach as celing
2. Ignore the target =
3. arr=[c,d,f,j] target=j ans=c

Q4) First and Last Position of Element in Sorted Array

arr=[5,7,7,7,7,8,8,10]
target=7
first pos=1 , last pos=4;
ans=[1,4]


Q5)Find position of an element in infinite sorted array

.cant use arr.length()
arr=[2,3,5,6,7,8,10,11,12,15,20,23,30]
target=15

Approach: Check in Chunks.
	  find start and end then apply BS

Q6)Peak index in a mountain array

arr=[1,2,4,5,7,6,3,2]
find the largest no.
cases:
1. if e[mid]>e[mid+1]=> you are in decreasing part of array
	=> e=mid
2.e[mid]<e[mid+1]=>You are in ascending part of arrat
	=> s=mid+1

3.When will loop break?
.In the end the s & e both will point to largest no.
 
Q7)Find in Mountain array.

arr=[1,2,3,4,5,3,1]

1.Find peak element
2.BS in asc array
3.if not found search in desc array

Q8)Search in Rotated Sorted array.

	arr=[3,4,5,6,7,0,1,2]
.Find the pivot in the array
.Search in first half =>ftom(0,pivot)
.otherwise, search in second half(pivot+1,end).

Find pivot?

.Case1: when?when mid>mid+1 element i.e pivot
.Case2: if mid<(mid-1) i.e. also pivot
.Case3: start>mid . In this case all elements from mid will be smaller than start,hence we can ignore all the elements since we are looking for peak i.e. largest element. e=mid-1.
.Case4: start<mid . s=mid+1.

duplicate array:

arr=[2,9,2,2,2]

Q9)Rotation Count:
	
arr=[4,5,6,7,0,1,2]
ans=pivot+1

Q10)arr=[7,2,5,10,8] 

.min no of partition we can make=1
.max no of partition we can make=n
.minAns=max value in array=10.
.maxAns=sum of all vlaues in array=32.
.[10,32] range
.s=10 , end= 32



